<html><head>
<meta http-equiv="content-type" content="text/html; charset=windows-1252"></head><body>
<pre>
             LAB3pre Work: Processes in an OS Kernel
                     DUE: 9-22-2020
       Answer questions below. Submit a (text-edit) file to TA
	     
1. READ List: Chapter 3: 3.1-3.5

What's a process? (Page 102)
Ans: A process is sequence of executions identified by OS Kernal as an individual entity for using system resources.
							or 
A process is the execution of an image, which is memory area containing the execution's code, stack and data.


Each process is represented by a PROC structure.
Read the PROC structure in 3.4.1 on Page 111 and answer the following questions:

What's the meaning of:
   pid, ppid____ process id, parent process id___
   status   ____PROC status = FREE or READY________
   priority ____Scheduling priority___________
   event    ____event value to sleep on_________
   exitCode ____exit value________


READ 3.5.2 on Process Family Tree. What are the
   PROC pointers child, sibling, parent used for?__keeping a track of process relations by maintaining a family tree__

	     
2. Download samples/LAB3pre/mtx. Run it under Linux.
   MTX is a multitasking system which simulates process operations of
         fork, exit, wait, sleep, wakeup
   in a Unix/Linux kernel
	     
/*********** A Multitasking System ************/
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

#include "type.h"    // PROC struct and system constants
	
// global variables:
PROC proc[NPROC], *running, *freeList, *readyQueue, *sleepList; 

running    = pointer to the current running proc
freeList   = a list of all FREE PROCs
readyQueue = a priority queue of procs READY to run
sleepList  = a list of SLEEP procs, if any.

Run mtx. It first initialize the system, creates an initial process P0.
P0 has the lowest priotiry 0, all other processes have priority 1

Ater initialization,
     P0 forks a child prcoess P1, switch process to run P1.

                The display looks like the following
-----------------------------------------------------------------------------
Welcome to KCW's Multitasking System
1. init system
freeList = [0 0]-&gt;[1 0]-&gt;[2 0]-&gt;[3 0]-&gt;[4 0]-&gt;[5 0]-&gt;[6 0]-&gt;[7 0]-&gt;[8 0]-&gt;NULL
2. create initial process P0
freeList = [1 0]-&gt;[2 0]-&gt;[3 0]-&gt;[4 0]-&gt;[5 0]-&gt;[6 0]-&gt;[7 0]-&gt;[8 0]-&gt;NULL
init complete: P0 running
3. P0 fork P1
4. P0 switch process to P1
P0: switch task
proc 0 in scheduler()
readyQueue = [1 1]-&gt;[0 0]-&gt;NULL
next running = 1
proc 1 resume to body()

proc 1 running: Parent=0 childList = NULL
freeList  = [2 0]-&gt;[3 0]-&gt;[4 0]-&gt;[5 0]-&gt;[6 0]-&gt;[7 0]-&gt;[8 0]-&gt;NULL
readQueue = [0 0]-&gt;NULL
sleepList = NULL
input a command: [ps|fork|switch|exit|sleep|wakeup|wait] : 
----------------------------------------------------------------------------
3.                     COMMANDS:
ps     : display procs with pid, ppid, status; same as ps in Unix/Linux
fork   : READ kfork()  on Page 109: What does it do?
Ans:     creates a child task and enters it into ready queue

switch : READ tswitch() on Page 108: What does it do?
Ans:     implements process context switching

exit   : READ kexit()  on Page 112: What does it do?
Ans:     terminates the process

sleep  : READ ksleep() on Page 111: What does it do?
Ans:     process goes to sleep

wakeup : READ kwakeup() on Page 112: What does it do?
Ans:     wakes up the process by putting it into ready queue waiting for its trurn to run 

wait   : READ kwait()   on Page 114: What does it do?
Ans:     waits for zombie child process

---------------------------------------------------------------------------

------------------------ REQUIREMENTS -----------------------------------
4.                Step 1: test fork
While P1 running, enter fork: What happens?
Ans: Creates a child process P2 and switches task to run P2

Enter fork many times; 
      How many times can P1 fork? ________ WHY?______
      Ans: 7 times. After 7th time, fork fails because there are no processes left in the queue.

Enter Control-c to end the program run.


5.                Step 2: Test sleep/wakeup
Run mtx again.
While P1 running, fork a child P2;
Switch to run P2. Where did P1 go?__ _________WHY?___
Ans: When we switch to run P2, the current task P1 calls tswitch(), saves return address and enters tswitch(). After executing SAVE part of tswitch(), the task calls scheduler to pick the next running task P2. At this point as P1 task is running, it enters into ready queue by priority.


P2: Enter sleep, with a value, e.g.123 to let P2 SLEEP.
What happens?__P2 enters into sleep state and P1 resumes___WHY?_After putting itself to sleep, P2 will call tswitch() to give the CPU to P1_____

Now, P1 should be running. Enter wakeup with a value, e.g. 234
Did any proc wake up? __No__ WHY? ___wakeup with value 234 has no effect since no process is sleeping on the event 234.

P1: Enter wakeup with 123
What happens?__P2 wakes up on event 123 and enters into ready queue__WHY? __as P2 went to sleep with event 123, 123 event will again wakeup P2 and enters into ready queue.___


6.          Step 3: test child exit/parent wait
	     
When a proc dies (exit) with a value, it becomes a ZOMBIE, wakeup its parent.
Parent may issue wait to wait for a ZOMBIE child, and frees the ZOMBIE

Run mtx;
P1: enter wait; What happens?_wait error occurs__ WHY?__as P1 doesn't have any child.____

	    CASE 1: child exit first, parent wait later
P1: fork a child P2, switch to P2.
P2: enter exit, with a value, e.g. 123 ==&gt; P2 will die with exitCode=123.
Which process runs now?_ P1 will resume running__ WHY?_as P1 is the parent of process P2, exit will wakeup parent and initializes the process.____

enter ps to see the proc status: P2 status = ? _Zombie_________

(P1 still running) enter wait; What happens?__P1 waits Zombie child__________
                   enter ps;   What happened to P2?____P2 is added to the end of free list_____

	     CASE 2: parent wait first, child exit later
P1: enter fork to fork a child P3
P1: enter wait;  What happens to P1?_P1 enters to sleep_ WHY?_as P1 doesn't have any zombie child, it will sleep on it own proc address____
P3: Enter exit with a value; What happens?_dispose children to P1, wakeup p1 and P1 waits for zombie child.____
P1: enter ps;  What's the status of P3?_P3 is added to the end of free list___ WHY? _as P1 waits for zombie child__.
	     
7.             Step 4: test Orphans
	     
When a process with children dies first, all its children become orphans.
In Unix/Linux, every process (except P0) MUST have a unique parent.
So, all orphans become P1's children. Hence P1 never dies.

Run mtx again.
P1: fork child P2, Switch to P2.
P2: fork several children of its own, e.g. P3, P4, P5 (all in its childList).
P2: exit with a value. 
P1 should be running WHY?_P2 exited with exit value 509, this makes P3, 4, 5 all orphans. They become P1's children as P1 never dies.______
P1: enter ps to see proc status: which proc is ZOMBIE?___P2 is zombie_____
What happened to P2's children? _became P1's children and they are in ready state_______
P1: enter wait; What happens? _P1 waits for zombie child 2_______________
P1: enter wait again; What happens?_P1 enters into sleep and P3 starts running__ WHY?___As P1 doesn't have any zombie child_____

How to let P1 READY to run again?__P1 can be let to ready again by terminating (exit) P3___



  
</pre></body></html>
